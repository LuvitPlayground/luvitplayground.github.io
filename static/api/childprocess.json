{
  "source": "doc/api/childprocess.markdown",
  "modules": [
    {
      "textRaw": "Child Process",
      "name": "child_process",
      "desc": "<p>It is possible to stream data through a child&#39;s stdin, stdout, and stderr in a fully non-blocking way.\n\n</p>\n",
      "methods": [
        {
          "textRaw": "childprocess.spawn(command, args, options)",
          "type": "method",
          "name": "spawn",
          "desc": "<p>Spawns a command line process.\n\n</p>\n<p>Since the data coming in is a stream, you may want to pass it through a filter like the luvit line emitter package\nto get lines instead. \n\n</p>\n<pre><code>function example()\n  local LineEmitter = require(&#39;line-emitter&#39;).LineEmitter\n  local childProcess = require(&#39;childprocess&#39;)\n  local function run(command, args, options)\n    local stdout, stderr = LineEmitter:new(), LineEmitter:new()\n    local child = childProcess.spawn(command, args, options)\n    child.stdout:pipe(stdout)\n    child.stderr:pipe(stderr)\n    return child, stdout, stderr\n  end\n\n  local child = run(&#39;ls&#39;, {&#39;-hal&#39;}, {})\n  child:on(&#39;data&#39;, print)\nend\n\nexample()\n\ntotal 2\ndrwxr-xr-x   31 root  wheel   1.1K Aug 21 16:39 .\ndrwxr-xr-x   31 root  wheel   1.1K Aug 21 16:39 ..</code></pre>\n<p>Options can have the following k-v pairs:\n</p>\n<pre><code>detached = [Boolean]\nstdio = [Array]\ncwd = [String]\nuid = [Number]\ngid = [Number]</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "command"
                },
                {
                  "name": "args"
                },
                {
                  "name": "options"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "childprocess.exec(command[, options], callback)",
          "type": "method",
          "name": "exec",
          "desc": "<p>Executes the supplied command and returns data returned in the callback.<br>The callback can be either a function or a thread for coroutine style code.<br>The command can have arguments e.g. <code>childprocess.exec(&#39;ls -a&#39;, print)</code>.  \n\n</p>\n<p>Options can have the following k-v pairs:  \n</p>\n<pre><code>timeout = [Number]  \nmaxBuffer = [Integer, default: 4 * 1024]\nsignal = [String, default: &#39;SIGTERM&#39;] \nshell = [String, default: &#39;cmd.exe&#39; or &#39;/bin/sh&#39;]</code></pre>\n<p>Additionally since this function delegates to Spawn, all spawn option k-vs are also valid.   \n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "command"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "childprocess.execFile(file[, args, options, callback])",
          "type": "method",
          "name": "execFile",
          "desc": "<p>Similiar to exec but the arguments for the command/file must be supplied as a string to the second parameter.  Also, callback is optional as well here.  \n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "file"
                },
                {
                  "name": "args"
                },
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Child Process"
    }
  ]
}
